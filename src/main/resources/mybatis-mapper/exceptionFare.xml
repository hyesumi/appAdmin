<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.app.admin.mapper.ExceptionFareMapper">

    <select id="getExceptionFareList" parameterType="ExceptionFare" resultType="ExceptionFare">
        SELECT
            a.idx AS id,
            a.exception_nm AS name,
            a.business_area_admcode AS code,
            CASE WHEN exception_type = 'area' THEN '지역'
                 WHEN exception_type = 'long_distance' THEN '장거리'
                 ELSE '기타'
            END AS type,
            b.area_nm AS area,
            a.exception_data AS extraData
        FROM taxi_exception_tb AS a
        LEFT JOIN exception_area_tb AS b ON a.exception_type_idx = b.idx
        WHERE 1=1
        <if test="name != null and name != ''">
            and a.exception_nm like CONCAT('%', #{name}, '%')
        </if>
        <if test="code != null and code != ''">
            and a.business_area_admcode = #{code}
        </if>
        limit ${perPage} OFFSET ${(currentPage-1)*perPage}
    </select>

    <select id="exceptionFareTotalCnt" parameterType="ExceptionFare" resultType="int">
        SELECT
           count(1)
        FROM taxi_exception_tb
        WHERE 1=1
        <if test="name != null and name != ''">
            and exception_nm like CONCAT('%', #{name}, '%')
        </if>
        <if test="code != null and code != ''">
            and business_area_admcode = #{code}
        </if>
    </select>

    <select id="findExceptionFareByIdx" resultType="ExceptionFare" parameterType="String">
        SELECT
            idx AS id,
            exception_nm AS name,
            business_area_admcode AS code,
            exception_type AS type,
            exception_type_idx AS area,
            exception_data AS extraData
        FROM taxi_exception_tb
            WHERE idx = #{id}
    </select>

    <update id="updateAuthAdminList" parameterType="Member">
        UPDATE
            auth_user
            SET user_role = #{role}
        WHERE user_email = #{loginId}
    </update>

    <insert id="insertAuthAdminList" parameterType="Member">
        INSERT INTO auth_user
        (
        user_pw,
        user_email,
        user_name,
        created_dt,
        updated_dt,
        use_yn,
        user_role
        )
        VALUES
        (
        #{password},
        #{loginId},
        #{name},
        now(),
        now(),
        'Y',
        #{role}
        )

    </insert>

    <delete id="deleteAuthUser" parameterType="java.util.Map">
        DELETE
        FROM auth_user
        WHERE user_id IN
        <foreach collection="idxArray" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <select id="checkPassword" parameterType="String" resultType="Member">
        SELECT
            user_email AS loginId,
            user_pw AS password
        FROM auth_user
        WHERE user_email = #{loginId}
    </select>

    <update id="updateUserPassword" parameterType="Member">
        UPDATE
            auth_user
        SET user_pw = #{password}, updated_dt = now()
        WHERE user_email = #{loginId}
    </update>


    <select id="getExceptionAreaList" resultType="java.util.Map">
        SELECT
            idx AS id,
            area_nm AS exceptionArea
        FROM exception_area_tb
    </select>
</mapper>